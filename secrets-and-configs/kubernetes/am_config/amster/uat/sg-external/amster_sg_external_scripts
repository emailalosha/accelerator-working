create Scripts --realm sg-external --id 3f57f327-1e4d-488c-9ad1-5f258c182747 --body '{"name":"Check soft token mock","description":"null","script":"LyoKICAtIERhdGEgbWFkZSBhdmFpbGFibGUgYnkgbm9kZXMgdGhhdCBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgYXJlIGF2YWlsYWJsZSBpbiB0aGUgc2hhcmVkU3RhdGUgdmFyaWFibGUuCiAgLSBUaGUgc2NyaXB0IHNob3VsZCBzZXQgb3V0Y29tZSB0byBlaXRoZXIgInRydWUiIG9yICJmYWxzZSIuCiAqLwp2YXIgdXNlcnMgPSBbJ2lhbXRlc3R1c2VyMDAxJywgJ2lhbXRlc3R1c2VyMDAyJywgJ2lhbXRlc3R1c2VyMDAzJwogICAgICAgICAgICAgLCAneHVucXUwMDEnLCAneHVucXUwMDInLCAneHVucXUwMDMnLCAneHVucXUwMDQnLCAneHVucXUwMDUnCiAgICAgICAgICAgICAsICdmdXNoZW5nMDAzJywgJ0Z1c2hlbmcwMDMnLCAneGlueXVhbjAwMiddOwp2YXIgdXNlcm5hbWUgPSBzaGFyZWRTdGF0ZS5nZXQoInVzZXJuYW1lIik7CmlmICh1c2Vycy5pbmNsdWRlcyh1c2VybmFtZSkpIHsKICBvdXRjb21lID0gInRydWUiOwp9IGVsc2UgewogIG91dGNvbWUgPSAiZmFsc2UiOwp9","default":false,"language":"JAVASCRIPT","context":"AUTHENTICATION_TREE_DECISION_NODE","createdBy":"null","creationDate":0,"lastModifiedBy":"null","lastModifiedDate":0}'
create Scripts --realm sg-external --id d5580cf0-b388-4adb-862e-58a985303bfe --body '{"name":"CIAM Activate Soft Token Check","description":"CIAM Activate Soft Token Check","script":"LyoKICAtIERhdGEgbWFkZSBhdmFpbGFibGUgYnkgbm9kZXMgdGhhdCBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgYXJlIGF2YWlsYWJsZSBpbiB0aGUgc2hhcmVkU3RhdGUgdmFyaWFibGUuCiAgLSBUaGUgc2NyaXB0IHNob3VsZCBzZXQgb3V0Y29tZSB0byBlaXRoZXIgInRydWUiIG9yICJmYWxzZSIuCiAqLwp2YXIgYWN0aXZhdGlvbkVuYWJsZWQgPSBzaGFyZWRTdGF0ZS5nZXQoImFjdGl2YXRpb25FbmFibGVkIik7CmlmIChhY3RpdmF0aW9uRW5hYmxlZCA9PSAndHJ1ZScpIHsKCW91dGNvbWUgPSAidHJ1ZSI7Cn0gZWxzZSB7CiAgb3V0Y29tZSA9ICJmYWxzZSI7Cn0=","default":false,"language":"JAVASCRIPT","context":"AUTHENTICATION_TREE_DECISION_NODE","createdBy":"null","creationDate":0,"lastModifiedBy":"null","lastModifiedDate":0}'
create Scripts --realm sg-external --id f582715d-e9e8-411b-928e-c88f603aa5a6 --body '{"name":"CIAM Created PinCode Check","description":"null","script":"LyoKICAtIERhdGEgbWFkZSBhdmFpbGFibGUgYnkgbm9kZXMgdGhhdCBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgYXJlIGF2YWlsYWJsZSBpbiB0aGUgc2hhcmVkU3RhdGUgdmFyaWFibGUuCiAgLSBUaGUgc2NyaXB0IHNob3VsZCBzZXQgb3V0Y29tZSB0byBlaXRoZXIgInRydWUiIG9yICJmYWxzZSIuCiAqLwoKb3V0Y29tZSA9IHNoYXJlZFN0YXRlLmdldCgiY3JlYXRlZFBpbkNvZGUiKTs=","default":false,"language":"JAVASCRIPT","context":"AUTHENTICATION_TREE_DECISION_NODE","createdBy":"null","creationDate":0,"lastModifiedBy":"null","lastModifiedDate":0}'
create Scripts --realm sg-external --id b18e42a4-ec5c-4e10-af42-652f61d50a12 --body '{"name":"CIAM Send OTP Check","description":"null","script":"LyoKICAtIERhdGEgbWFkZSBhdmFpbGFibGUgYnkgbm9kZXMgdGhhdCBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgYXJlIGF2YWlsYWJsZSBpbiB0aGUgc2hhcmVkU3RhdGUgdmFyaWFibGUuCiAgLSBUaGUgc2NyaXB0IHNob3VsZCBzZXQgb3V0Y29tZSB0byBlaXRoZXIgInRydWUiIG9yICJmYWxzZSIuCiAqLwp2YXIgb3RwRW5hYmxlZCA9IHNoYXJlZFN0YXRlLmdldCgib3RwRW5hYmxlZCIpOwppZiAob3RwRW5hYmxlZCA9PSAndHJ1ZScpIHsKCW91dGNvbWUgPSAidHJ1ZSI7Cn0gZWxzZSB7CiAgb3V0Y29tZSA9ICJmYWxzZSI7Cn0=","default":false,"language":"JAVASCRIPT","context":"AUTHENTICATION_TREE_DECISION_NODE","createdBy":"null","creationDate":0,"lastModifiedBy":"null","lastModifiedDate":0}'
create Scripts --realm sg-external --id 2e523b75-8156-4fc1-9f84-988d11bf1a0f --body '{"name":"OTP Lockout script","description":"null","script":"LyoKICAtIERhdGEgbWFkZSBhdmFpbGFibGUgYnkgbm9kZXMgdGhhdCBoYXZlIGFscmVhZHkgZXhlY3V0ZWQgYXJlIGF2YWlsYWJsZSBpbiB0aGUgc2hhcmVkU3RhdGUgdmFyaWFibGUuCiAgLSBUaGUgc2NyaXB0IHNob3VsZCBzZXQgb3V0Y29tZSB0byBlaXRoZXIgInRydWUiIG9yICJmYWxzZSIuCiAqLwoKb3V0Y29tZSA9ICJ0cnVlIjs=","default":false,"language":"JAVASCRIPT","context":"AUTHENTICATION_TREE_DECISION_NODE","createdBy":"null","creationDate":0,"lastModifiedBy":"null","lastModifiedDate":0}'
update Scripts --realm sg-external --id d22f9a0c-426a-4466-b95e-d0f125b0d5fa --body '{"name":"OAuth2 Access Token Modification Script","description":"Default global script for OAuth2 Access Token Modification","script":"LyoKICogQ29weXJpZ2h0IDIwMTkgRm9yZ2VSb2NrIEFTLiBBbGwgUmlnaHRzIFJlc2VydmVkCiAqCiAqIFVzZSBvZiB0aGlzIGNvZGUgcmVxdWlyZXMgYSBjb21tZXJjaWFsIHNvZnR3YXJlIGxpY2Vuc2Ugd2l0aCBGb3JnZVJvY2sgQVMuCiAqIG9yIHdpdGggb25lIG9mIGl0cyBhZmZpbGlhdGVzLiBBbGwgdXNlIHNoYWxsIGJlIGV4Y2x1c2l2ZWx5IHN1YmplY3QKICogdG8gc3VjaCBsaWNlbnNlIGJldHdlZW4gdGhlIGxpY2Vuc2VlIGFuZCBGb3JnZVJvY2sgQVMuCiAqLwoKaW1wb3J0IG9yZy5mb3JnZXJvY2suaHR0cC5wcm90b2NvbC5SZXF1ZXN0CmltcG9ydCBvcmcuZm9yZ2Vyb2NrLmh0dHAucHJvdG9jb2wuUmVzcG9uc2UKCmltcG9ydCBjb20uaXBsYW5ldC5zc28uU1NPRXhjZXB0aW9uCgppbXBvcnQgZ3Jvb3Z5Lmpzb24uSnNvblNsdXJwZXIKCmFjY2Vzc1Rva2VuLnNldEZpZWxkKCJjb3VudHJ5IiwgIlNHIikKZGVmIGF0dHJpYnV0ZXMgPSBpZGVudGl0eS5nZXRBdHRyaWJ1dGVzKFsic2NiLVJlbElEIiwic2NiLWxhc3RMb2dpblRpbWUiLCJzY2ItRUJJRCJdLnRvU2V0KCkpCmlmIChhdHRyaWJ1dGVzWyJzY2ItUmVsSUQiXSAhPSBudWxsKSB7CiAgYWNjZXNzVG9rZW4uc2V0RmllbGQoInJlbGlkIiwgYXR0cmlidXRlc1sic2NiLVJlbElEIl1bMF0pCn0KaWYgKGF0dHJpYnV0ZXNbInNjYi1FQklEIl0gIT0gbnVsbCkgewogIGFjY2Vzc1Rva2VuLnNldEZpZWxkKCJyZWxpZCIsIGF0dHJpYnV0ZXNbInNjYi1FQklEIl1bMF0pCn0KZGVmIGxhc3RMb2dpblRpbWUgPSAiIgppZiAoYXR0cmlidXRlc1sic2NiLWxhc3RMb2dpblRpbWUiXSAhPSBudWxsKSB7CiAgICBsYXN0TG9naW5UaW1lID0gYXR0cmlidXRlc1sic2NiLWxhc3RMb2dpblRpbWUiXVswXQp9CmFjY2Vzc1Rva2VuLnNldEZpZWxkKCJsYXN0TG9naW5UaW1lIiwgbGFzdExvZ2luVGltZSkKCi8qKgogKiBEZWZpbmVkIHZhcmlhYmxlczoKICogYWNjZXNzVG9rZW4gLSBUaGUgYWNjZXNzIHRva2VuIHRvIGJlIHVwZGF0ZWQuIE11dGFibGUgb2JqZWN0LCBhbGwgY2hhbmdlcyB0byB0aGUgYWNjZXNzIHRva2VuIHdpbGwgYmUgcmVmbGVjdGVkLgogKiBodHRwQ2xpZW50IC0gYWx3YXlzIHByZXNlbnQsIHRoZSBIVFRQIGNsaWVudCB0aGF0IGNhbiBiZSB1c2VkIHRvIG1ha2UgZXh0ZXJuYWwgSFRUUCByZXF1ZXN0cwogKiBpZGVudGl0eSAtIGFsd2F5cyBwcmVzZW50LCB0aGUgaWRlbnRpdHkgb2YgdGhlIHJlc291cmNlIG93bmVyCiAqIGxvZ2dlciAtIGFsd2F5cyBwcmVzZW50LCBjb3JyZXNwb25kaW5nIGxvZyBmaWxlcyB3aWxsIGJlIHByZWZpeGVkIHdpdGg6IHNjcmlwdHMuT0FVVEgyX0FDQ0VTU19UT0tFTl9NT0RJRklDQVRJT04uCiAqIHNjb3BlcyAtIGFsd2F5cyBwcmVzZW50LCB0aGUgcmVxdWVzdGVkIHNjb3BlcwogKiBzZXNzaW9uIC0gcHJlc2VudCBpZiB0aGUgcmVxdWVzdCBjb250YWlucyB0aGUgc2Vzc2lvbiBjb29raWUsIHRoZSB1c2VyJ3Mgc2Vzc2lvbiBvYmplY3QKICoKICogTm8gcmV0dXJuIHZhbHVlIC0gY2hhbmdlcyBzaGFsbCBiZSBtYWRlIHRvIHRoZSBhY2Nlc3NUb2tlbiBwYXJhbWV0ZXIgZGlyZWN0bHkuCiAqCiAqIFRoZSBjaGFuZ2VzIG1hZGUgdG8gT0F1dGgyIGFjY2VzcyB0b2tlbnMgd2lsbCBkaXJlY3RseSBpbXBhY3QgdGhlIHNpemUgb2YgdGhlIENUUyB0b2tlbnMsIGFuZCBzaW1pbGFybHkgdGhlIHNpemUgb2YKICogdGhlIEpXVHMgaWYgY2xpZW50IGJhc2VkIE9BdXRoMiB0b2tlbnMgYXJlIHV0aWxpc2VkLgogKiBXaGVuIGFkZGluZy91cGRhdGluZyBmaWVsZHMgbWFrZSBzdXJlIHRoYXQgdGhlIHRva2VuIHNpemUgcmVtYWlucyB3aXRoaW4gY2xpZW50L3VzZXItYWdlbnQgbGltaXRzLgogKi8KCi8qCi8vRmllbGQgdG8gYWx3YXlzIGluY2x1ZGUgaW4gdG9rZW4KYWNjZXNzVG9rZW4uc2V0RmllbGQoImhlbGxvIiwgIndvcmxkIikKCi8vT2J0YWluIGFkZGl0aW9uYWwgdmFsdWVzIGJ5IHBlcmZvcm1pbmcgYSBSRVNUIGNhbGwgdG8gYW4gZXh0ZXJuYWwgc2VydmljZQp0cnkgewogICAgUmVzcG9uc2UgcmVzcG9uc2UgPSBodHRwQ2xpZW50LnNlbmQobmV3IFJlcXVlc3QoKQogICAgICAgICAgICAuc2V0VXJpKCJodHRwczovL3RoaXJkLnBhcnR5LmFwcC9oZWxsby5qc3AiKQogICAgICAgICAgICAuc2V0TWV0aG9kKCJQT1NUIikKICAgICAgICAgICAgLm1vZGlmeUhlYWRlcnMoeyBoZWFkZXJzIC0+IGhlYWRlcnMucHV0KCJDb250ZW50LVR5cGUiLCAiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04IikgfSkKLy8gICAgICAgICAgLnNldEVudGl0eSgnZm9vPWJhciZoZWxsbz13b3JsZCcpKQogICAgICAgICAgICAuc2V0RW50aXR5KFtmb286ICdiYXInXSkpCiAgICAgICAgICAgIC5nZXRPclRocm93KCkKICAgIGlmIChyZXNwb25zZS5zdGF0dXMuc3VjY2Vzc2Z1bCkgewogICAgICAgIGRlZiByZXN1bHQgPSBuZXcgSnNvblNsdXJwZXIoKS5wYXJzZVRleHQocmVzcG9uc2UuZW50aXR5LnN0cmluZykKICAgICAgICBhY2Nlc3NUb2tlbi5zZXRGaWVsZHMocmVzdWx0LmdldCgidXBkYXRlZEZpZWxkcyIpKQogICAgfSBlbHNlIHsKICAgICAgICBsb2dnZXIuZXJyb3IoIlVuYWJsZSB0byBvYnRhaW4gYWNjZXNzIHRva2VuIG1vZGlmaWNhdGlvbnM6IHt9LCB7fSIsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2UuZW50aXR5LnRvU3RyaW5nKCkpCiAgICB9Cn0gY2F0Y2ggKEludGVycnVwdGVkRXhjZXB0aW9uIGV4KSB7CiAgICBsb2dnZXIuZXJyb3IoIlRoZSByZXF1ZXN0IHByb2Nlc3Npbmcgd2FzIGludGVycnVwdGVkIiwgZXgpCiAgICBUaHJlYWQuY3VycmVudFRocmVhZCgpLmludGVycnVwdCgpCiAgICAvL1RoZSBhY2Nlc3MgdG9rZW4gcmVxdWVzdCB3aWxsIGZhaWwgd2l0aCBIVFRQIDUwMCBlcnJvciBpbiB0aGlzIGNhc2UuCiAgICB0aHJvdyBuZXcgUnVudGltZUV4Y2VwdGlvbigiVW5hYmxlIHRvIG9idGFpbiByZXNwb25zZSBmcm9tICIpCn0KCi8vQWRkIG5ldyBmaWVsZHMgY29udGFpbmluZyBpZGVudGl0eSBhdHRyaWJ1dGUgdmFsdWVzCmRlZiBhdHRyaWJ1dGVzID0gaWRlbnRpdHkuZ2V0QXR0cmlidXRlcyhbIm1haWwiLCAidGVsZXBob25lTnVtYmVyIl0udG9TZXQoKSkKYWNjZXNzVG9rZW4uc2V0RmllbGQoIm1haWwiLCBhdHRyaWJ1dGVzWyJtYWlsIl0pCmFjY2Vzc1Rva2VuLnNldEZpZWxkKCJwaG9uZSIsIGF0dHJpYnV0ZXNbInRlbGVwaG9uZU51bWJlciJdKQoKLy9BZGQgbmV3IGZpZWxkcyBjb250YWluaW5nIHNlc3Npb24gcHJvcGVydHkgdmFsdWVzCmlmIChzZXNzaW9uICE9IG51bGwpIHsgLy8gc2Vzc2lvbiBpcyBub3QgYXZhaWxhYmxlIGZvciByZXNvdXJjZSBvd25lciBwYXNzd29yZCBjcmVkZW50aWFscyBncmFudAogICAgdHJ5IHsKICAgICAgICBhY2Nlc3NUb2tlbi5zZXRGaWVsZCgiaXBBZGRyZXNzIiwgc2Vzc2lvbi5nZXRQcm9wZXJ0eSgiSG9zdCIpKQogICAgfSBjYXRjaCAoU1NPRXhjZXB0aW9uIGV4KSB7CiAgICAgICAgbG9nZ2VyLmVycm9yKCJVbmFibGUgdG8gcmV0cmlldmUgc2Vzc2lvbiBwcm9wZXJ0eSB2YWx1ZSIsIGV4KQogICAgfQp9CgovLyBSZW1vdmUgYSBuYXRpdmUgZmllbGQgZnJvbSB0aGUgdG9rZW4gZW50cnksIHRoYXQgd2FzIHNldCBieSBBTS4gRm9yIGNvbXBsZXRlIGxpc3Qgb2YgcmVtb3ZlKiBtZXRob2RzIHNlZSB0aGUgSmF2YURvYwovLyBmb3Igb3JnLmZvcmdlcm9jay5vYXV0aDIuY29yZS5BY2Nlc3NUb2tlbiBjbGFzcy4KYWNjZXNzVG9rZW4ucmVtb3ZlVG9rZW5OYW1lKCkKKi8=","default":true,"language":"GROOVY","context":"OAUTH2_ACCESS_TOKEN_MODIFICATION","createdBy":"null","creationDate":0,"lastModifiedBy":"null","lastModifiedDate":0}'
update Scripts --realm sg-external --id 36863ffb-40ec-48b9-94b1-9a99f71cc3b5 --body '{"name":"OIDC Claims Script","description":"Default global script for OIDC claims","script":"","default":true,"language":"GROOVY","context":"OIDC_CLAIMS","createdBy":"null","creationDate":0,"lastModifiedBy":"null","lastModifiedDate":0}'
create Scripts --realm sg-external --id cd8cdad5-8245-447f-a264-32c9c2c591a4 --body '{"name":"mock create new user","description":null,"script":"dmFyIHZhbElkID0gInVzZXJuYW1lIjsKdmFyIG91dGNvbWVNYXBwaW5nID0gWyJyZWdpc3RlcmVkIiwgImZhaWxlZCJdOwp2YXIgZGVmYXVsdE91dGNvbWUgPSAic3VjY2VzcyI7Cgp2YXIgc3RhdGVWYWwgPSBzaGFyZWRTdGF0ZS5nZXQodmFsSWQpOwpvdXRjb21lID0gb3V0Y29tZU1hcHBpbmcuZmluZCgoYSkgPT4gc3RhdGVWYWwuaW5jbHVkZXMoYSkpOwpvdXRjb21lID0gb3V0Y29tZSA/IG91dGNvbWUgOiBkZWZhdWx0T3V0Y29tZTs=","default":false,"language":"JAVASCRIPT","context":"AUTHENTICATION_TREE_DECISION_NODE","createdBy":"null","creationDate":0,"lastModifiedBy":"null","lastModifiedDate":0}'
create Scripts --realm sg-external --id 357b1c94-91a3-4e3e-ab22-700b553b21a5 --body '{"name":"mock username uniqueness check","description":null,"script":"dmFyIHZhbElkID0gInVzZXJuYW1lIgp2YXIgb3V0Y29tZU1hcHBpbmcgPSBbImR1cCJdCnZhciBkZWZhdWx0T3V0Y29tZSA9ICJ1bmlxdWUiCgp2YXIgc3RhdGVWYWwgPSBzaGFyZWRTdGF0ZS5nZXQodmFsSWQpOwpvdXRjb21lID0gb3V0Y29tZU1hcHBpbmcuZmluZCgoYSkgPT4gc3RhdGVWYWwuaW5jbHVkZXMoYSkpOwpvdXRjb21lID0gb3V0Y29tZSA/IG91dGNvbWUgOiBkZWZhdWx0T3V0Y29tZTs=","default":false,"language":"JAVASCRIPT","context":"AUTHENTICATION_TREE_DECISION_NODE","createdBy":"null","creationDate":0,"lastModifiedBy":"null","lastModifiedDate":0}'
create Scripts --realm sg-external --id af777e2f-4c6f-4d5f-b4b2-f2cafae2011e --body '{"name":"mock verify temp credentials","description":null,"script":"dmFyIHZhbElkID0gInRlbXBJZCIKdmFyIG91dGNvbWVNYXBwaW5nID0gWyJleHBpcmVkIiwgImludmFsaWQiLCAibG9ja2VkIiwgInJlZ2lzdGVyZWQiLCAiZmFpbGVkIl0KdmFyIGRlZmF1bHRPdXRjb21lID0gInN1Y2Nlc3MiCgp2YXIgc3RhdGVWYWwgPSBzaGFyZWRTdGF0ZS5nZXQodmFsSWQpOwpvdXRjb21lID0gb3V0Y29tZU1hcHBpbmcuZmluZCgoYSkgPT4gc3RhdGVWYWwuaW5jbHVkZXMoYSkpCm91dGNvbWUgPSBvdXRjb21lID8gb3V0Y29tZSA6IGRlZmF1bHRPdXRjb21lOw==","default":false,"language":"JAVASCRIPT","context":"AUTHENTICATION_TREE_DECISION_NODE","createdBy":"null","creationDate":0,"lastModifiedBy":"null","lastModifiedDate":0}'
